{"version":3,"sources":["dist/js/script.js"],"names":["AOS","init","once","duration","document","addEventListener","navbarToggler","querySelector","navbarMenu","offcanvasBackground","closeButton","classList","toggle","remove","querySelectorAll","forEach","element","add","header","counterElement","getElementById","count","target","stepTime","Math","abs","floor","updateCounter","innerText","toFixed","setTimeout","counterElements","counts","targets","stepTimes","updateCounters","counters","countersAnimated","observer","IntersectionObserver","entries","entry","isIntersecting","id","endValue","animateCounter","startValue","range","increment","timer","setInterval","textContent","clearInterval","threshold","counter","observe","items","paragraphs","item","i","p","style","display","targetId","split","window","scrollIndicator","progressCircle","scrollY","scrollTop","strokeDashoffset","pageYOffset","documentElement","scrollHeight","clientHeight","scrollTo","top","behavior"],"mappings":"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","file":"script.02d4f3e0.js","sourceRoot":"..\\src","sourcesContent":["AOS.init({\r\n    once: true,\r\n    duration: 1200,\r\n});\r\n\r\ndocument.addEventListener('DOMContentLoaded', function () {\r\n    // Javascript to handle Sidebar in Responsive Mobile\r\n    const navbarToggler = document.querySelector('.navbar-toggler');\r\n    const navbarMenu = document.querySelector('.offcanvas-menu');\r\n    const offcanvasBackground = document.querySelector('.offcanvas-background');\r\n    const closeButton = document.querySelector('.btn-close');\r\n\r\n    navbarToggler.addEventListener('click', function () {\r\n        navbarMenu.classList.toggle('show');\r\n        offcanvasBackground.classList.toggle('show');\r\n    });\r\n\r\n    closeButton.addEventListener('click', function () {\r\n        navbarMenu.classList.remove('show');\r\n        offcanvasBackground.classList.remove('show');\r\n    });\r\n\r\n    offcanvasBackground.addEventListener('click', function () {\r\n        navbarMenu.classList.remove('show');\r\n        offcanvasBackground.classList.remove('show');\r\n    });\r\n\r\n    // Select all transition when load finish\r\n    const elementsRU = document.querySelectorAll('.transition-fade-left, .transition-fade-right, .transition-fade-up');\r\n\r\n    // class 'active' to activate animation after page load\r\n    elementsRU.forEach(element => {\r\n        element.classList.add('active');\r\n    });\r\n\r\n    const header = document.querySelector(\".transition-fade-down\");\r\n    if (header) {\r\n        header.classList.add(\"show\");\r\n\r\n        // Event listener to detect end transition\r\n        header.addEventListener('transitionend', function () {\r\n            header.classList.remove('transition-fade-down');\r\n        }, { once: true }); // remove event listener after run once\r\n    }\r\n\r\n    // Animation to start Counter \r\n    const counterElement = document.getElementById('counter');\r\n    let count = 0;\r\n    const target = 2.5;\r\n    const duration = 1000; // Duration of the animation in milliseconds\r\n    const stepTime = Math.abs(Math.floor(duration / (target * 100)));\r\n\r\n    function updateCounter() {\r\n        count += 0.01; // Increment by 0.01 for smooth animation\r\n        if (count >= target) {\r\n            counterElement.innerText = target.toFixed(1);\r\n        } else {\r\n            counterElement.innerText = count.toFixed(1);\r\n            setTimeout(updateCounter, stepTime);\r\n        }\r\n    }\r\n\r\n    updateCounter();\r\n\r\n    // Animation to start Counter \r\n    const counterElements = document.getElementById('counter-projek');\r\n    let counts = 0;\r\n    const targets = 2.5;\r\n    const durations = 2000; // Duration of the animation in milliseconds\r\n    const stepTimes = Math.abs(Math.floor(durations / (targets * 100)));\r\n\r\n    function updateCounters() {\r\n        count += 0.01; // Increment by 0.01 for smooth animation\r\n        if (count >= target) {\r\n            counterElements.innerText = targets.toFixed(1);\r\n        } else {\r\n            counterElements.innerText = counts.toFixed(1);\r\n            setTimeout(updateCounters, stepTimes);\r\n        }\r\n    }\r\n\r\n    updateCounters();\r\n\r\n    // Animation to start Counter \r\n    function animateCounter(element, endValue, duration) {\r\n        let startValue = 0;\r\n        let range = endValue - startValue;\r\n        let increment = endValue > startValue ? 1 : -1;\r\n        let stepTime = Math.abs(Math.floor(duration / range));\r\n        let timer = setInterval(() => {\r\n            startValue += increment;\r\n            element.textContent = startValue;\r\n            if (startValue === endValue) {\r\n                clearInterval(timer);\r\n            }\r\n        }, stepTime);\r\n    }\r\n\r\n    // run counter animation\r\n    const counters = document.querySelectorAll('.counter');\r\n    let countersAnimated = {};\r\n\r\n    const observer = new IntersectionObserver((entries) => {\r\n        entries.forEach(entry => {\r\n            if (entry.isIntersecting) {\r\n                const element = entry.target;\r\n                const id = element.id;\r\n                if (!countersAnimated[id]) {\r\n                    countersAnimated[id] = true;\r\n                    let endValue;\r\n                    switch (id) {\r\n                        case 'counterClient':\r\n                            endValue = 726;\r\n                            break;\r\n                        case 'counterCountries':\r\n                            endValue = 32;\r\n                            break;\r\n                        case 'counterCreatives':\r\n                            endValue = 24;\r\n                            break;\r\n                        default:\r\n                            endValue = 0;\r\n                    }\r\n                    const duration = 2000; // Animation duration in milliseconds\r\n                    animateCounter(element, endValue, duration);\r\n                }\r\n            }\r\n        });\r\n    }, {\r\n        threshold: 0.5\r\n    });\r\n\r\n    counters.forEach(counter => {\r\n        observer.observe(counter);\r\n    });\r\n});\r\n\r\n// Get all items and paragraphs\r\nconst items = document.querySelectorAll('.clickable-item');\r\nconst paragraphs = document.querySelectorAll('.content-paragraph');\r\n\r\nitems.forEach(item => {\r\n    item.addEventListener('click', function () {\r\n        // Remove active class from all items\r\n        items.forEach(i => i.classList.remove('active-item'));\r\n        // Hide all paragraphs\r\n        paragraphs.forEach(p => p.style.display = 'none');\r\n\r\n        // Add active class to the clicked item\r\n        item.classList.add('active-item');\r\n\r\n        // Show the corresponding paragraph\r\n        const targetId = 'paragraph-' + item.id.split('-')[1];\r\n        document.getElementById(targetId).style.display = 'block';\r\n    });\r\n});\r\n\r\n\r\n// handle indicator animation\r\nwindow.addEventListener('scroll', function () {\r\n    var scrollIndicator = document.getElementById('scroll-indicator');\r\n    var progressCircle = document.getElementById('progress-circle');\r\n\r\n    // Show the scroll indicator when scrolling down\r\n    if (window.scrollY > 100) {\r\n        scrollIndicator.style.display = 'flex';\r\n    } else {\r\n        scrollIndicator.style.display = 'none';\r\n    }\r\n\r\n    // Calculate the scroll percentage\r\n    var scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n    var docHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;\r\n    var scrollPercent = (scrollTop / docHeight) * 100;\r\n\r\n    // Update the stroke-dashoffset based on the scroll percentage\r\n    var strokeDashoffset = 283 - (scrollPercent / 100) * 283;\r\n    progressCircle.style.strokeDashoffset = strokeDashoffset;\r\n});\r\n\r\n// scroll to top function\r\ndocument.getElementById('scroll-indicator').addEventListener('click', function () {\r\n    window.scrollTo({ top: 0, behavior: 'smooth' });\r\n});\r\n"]}